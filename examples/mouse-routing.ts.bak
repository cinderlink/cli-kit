/**
 * Mouse Routing Example - Advanced mouse event handling demonstration
 * 
 * This example showcases:
 * - Mouse-aware component wrapper functionality
 * - Click detection and hover effects
 * - Multiple interactive components with proper event routing
 * - Visual feedback for mouse interactions
 * - Integration with existing Button components
 */

import { Effect, Stream } from "effect"
import { runApp } from "@/index.ts"
import { vstack, hstack, text, box } from "@/core/view.ts"
import type { Component, Cmd, AppServices, AppOptions, KeyEvent, MouseEvent } from "@/core/types.ts"
import { style, Colors, Borders } from "@/styling/index.ts"
import { InputService } from "@/services/index.ts"
import { 
  makeMouseAware,
  clickableHandler,
  type MouseAwareModel,
  type MouseAwareMsg
} from "@/components/mouse-aware.ts"
import { LiveServices } from "../src/services/impl/index.ts"

// =============================================================================
// Simple Button Component (Effect-based, not class-based)
// =============================================================================

interface SimpleButtonModel {
  readonly label: string
  readonly width: number
  readonly height: number
  readonly isPressed: boolean
  readonly clickCount: number
}

type SimpleButtonMsg = 
  | { readonly _tag: "Press" }
  | { readonly _tag: "Release" }
  | { readonly _tag: "Click" }

const simpleButton = (label: string, width: number = 12): Component<SimpleButtonModel, SimpleButtonMsg> => ({
  init: Effect.succeed([
    {
      label,
      width,
      height: 3,
      isPressed: false,
      clickCount: 0
    },
    []
  ]),
  
  update(msg: SimpleButtonMsg, model: SimpleButtonModel) {
    switch (msg._tag) {
      case "Press":
        return Effect.succeed([
          { ...model, isPressed: true },
          []
        ])
        
      case "Release":
        return Effect.succeed([
          { ...model, isPressed: false },
          []
        ])
        
      case "Click":
        return Effect.succeed([
          { ...model, clickCount: model.clickCount + 1 },
          []
        ])
    }
  },
  
  view(model: SimpleButtonModel) {
    const buttonStyle = model.isPressed 
      ? style().foreground(Colors.white).background(Colors.black).bold()
      : style().foreground(Colors.white).background(Colors.blue)
    
    const padding = ' '.repeat(Math.max(0, Math.floor((model.width - model.label.length) / 2)))
    const paddedLabel = padding + model.label + padding
    const finalLabel = paddedLabel.length > model.width 
      ? paddedLabel.substring(0, model.width)
      : paddedLabel + ' '.repeat(model.width - paddedLabel.length)
    
    return box(
      text(finalLabel, buttonStyle),
      { border: Borders.Rounded }
    )
  }
})

// =============================================================================
// Demo Model and Messages
// =============================================================================

interface DemoModel {
  readonly button1: MouseAwareModel<SimpleButtonModel>
  readonly button2: MouseAwareModel<SimpleButtonModel>
  readonly button3: MouseAwareModel<SimpleButtonModel>
  readonly statusMessage: string
  readonly mousePosition: { x: number; y: number }
  readonly totalClicks: number
}

type DemoMsg = 
  | { readonly _tag: "Quit" }
  | { readonly _tag: "Button1Msg"; readonly msg: MouseAwareMsg<SimpleButtonMsg> }
  | { readonly _tag: "Button2Msg"; readonly msg: MouseAwareMsg<SimpleButtonMsg> }
  | { readonly _tag: "Button3Msg"; readonly msg: MouseAwareMsg<SimpleButtonMsg> }
  | { readonly _tag: "MouseMove"; readonly x: number; readonly y: number }
  | { readonly _tag: "KeyPress"; readonly key: KeyEvent }

// =============================================================================
// Mouse-Aware Button Wrappers
// =============================================================================

const createMouseAwareButton = (label: string, x: number, y: number, width: number = 12) => 
  makeMouseAware(
    simpleButton(label, width),
    {
      componentId: `button-${label.toLowerCase().replace(/\s/g, '-')}`,
      getBounds: (model: SimpleButtonModel) => ({
        x,
        y,
        width: model.width,
        height: model.height
      }),
      handleMouse: clickableHandler<SimpleButtonMsg>(() => ({ _tag: "Click" })),
      zIndex: 1
    }
  )

// =============================================================================
// Main Component
// =============================================================================

const mouseRoutingDemo: Component<DemoModel, DemoMsg> = {
  init: Effect.gen(function* (_) {
    // Create three mouse-aware buttons
    const button1Component = createMouseAwareButton("Click Me!", 5, 5, 12)
    const button2Component = createMouseAwareButton("Press Here", 25, 5, 14)
    const button3Component = createMouseAwareButton("Button 3", 45, 5, 12)
    
    const [button1Model] = yield* _(button1Component.init)
    const [button2Model] = yield* _(button2Component.init)
    const [button3Model] = yield* _(button3Component.init)
    
    const model: DemoModel = {
      button1: button1Model,
      button2: button2Model,
      button3: button3Model,
      statusMessage: "Mouse around and click the buttons! Press 'q' to quit.",
      mousePosition: { x: 0, y: 0 },
      totalClicks: 0
    }
    
    return [model, []]
  }),
  
  update(msg: DemoMsg, model: DemoModel) {
    switch (msg._tag) {
      case "Quit":
        return Effect.succeed([model, [Effect.succeed({ _tag: "Quit" as const })]])
        
      case "Button1Msg": {
        const button1Component = createMouseAwareButton("Click Me!", 5, 5, 12)
        return Effect.map(
          button1Component.update(msg.msg, model.button1),
          ([newButton1, cmds]) => {
            const newTotalClicks = msg.msg._tag === "InnerMsg" && msg.msg.msg._tag === "Click"
              ? model.totalClicks + 1
              : model.totalClicks
            
            const newStatusMessage = msg.msg._tag === "InnerMsg" && msg.msg.msg._tag === "Click"
              ? `Button 1 clicked! Total clicks: ${newTotalClicks}`
              : msg.msg._tag === "MouseEnter"
                ? "Hovering over Button 1"
                : msg.msg._tag === "MouseLeave"
                  ? "Left Button 1"
                  : model.statusMessage
            
            return [
              {
                ...model,
                button1: newButton1,
                totalClicks: newTotalClicks,
                statusMessage: newStatusMessage
              },
              cmds.map(cmd => cmd.pipe(Effect.map(innerMsg => ({ _tag: "Button1Msg" as const, msg: innerMsg }))))
            ]
          }
        )
      }
      
      case "Button2Msg": {
        const button2Component = createMouseAwareButton("Press Here", 25, 5, 14)
        return Effect.map(
          button2Component.update(msg.msg, model.button2),
          ([newButton2, cmds]) => {
            const newTotalClicks = msg.msg._tag === "InnerMsg" && msg.msg.msg._tag === "Click"
              ? model.totalClicks + 1
              : model.totalClicks
            
            const newStatusMessage = msg.msg._tag === "InnerMsg" && msg.msg.msg._tag === "Click"
              ? `Button 2 clicked! Total clicks: ${newTotalClicks}`
              : msg.msg._tag === "MouseEnter"
                ? "Hovering over Button 2"
                : msg.msg._tag === "MouseLeave"
                  ? "Left Button 2"
                  : model.statusMessage
            
            return [
              {
                ...model,
                button2: newButton2,
                totalClicks: newTotalClicks,
                statusMessage: newStatusMessage
              },
              cmds.map(cmd => cmd.pipe(Effect.map(innerMsg => ({ _tag: "Button2Msg" as const, msg: innerMsg }))))
            ]
          }
        )
      }
      
      case "Button3Msg": {
        const button3Component = createMouseAwareButton("Button 3", 45, 5, 12)
        return Effect.map(
          button3Component.update(msg.msg, model.button3),
          ([newButton3, cmds]) => {
            const newTotalClicks = msg.msg._tag === "InnerMsg" && msg.msg.msg._tag === "Click"
              ? model.totalClicks + 1
              : model.totalClicks
            
            const newStatusMessage = msg.msg._tag === "InnerMsg" && msg.msg.msg._tag === "Click"
              ? `Button 3 clicked! Total clicks: ${newTotalClicks}`
              : msg.msg._tag === "MouseEnter"
                ? "Hovering over Button 3"
                : msg.msg._tag === "MouseLeave"
                  ? "Left Button 3"
                  : model.statusMessage
            
            return [
              {
                ...model,
                button3: newButton3,
                totalClicks: newTotalClicks,
                statusMessage: newStatusMessage
              },
              cmds.map(cmd => cmd.pipe(Effect.map(innerMsg => ({ _tag: "Button3Msg" as const, msg: innerMsg }))))
            ]
          }
        )
      }
      
      case "MouseMove":
        return Effect.succeed([
          {
            ...model,
            mousePosition: { x: msg.x, y: msg.y }
          },
          []
        ])
        
      case "KeyPress": {
        const key = msg.key
        
        if (key.key === 'q') {
          return Effect.map(this.update({ _tag: "Quit" }, model), result => result)
        }
        
        return Effect.succeed([model, []])
      }
    }
  },
  
  view(model: DemoModel) {
    const title = text("üñ±Ô∏è  Mouse Routing Demo", style().foreground(Colors.brightYellow).bold())
    const subtitle = text("Click the buttons and watch mouse events being routed!", style().foreground(Colors.gray))
    
    // Button views
    const button1Component = createMouseAwareButton("Click Me!", 5, 5, 12)
    const button2Component = createMouseAwareButton("Press Here", 25, 5, 14)
    const button3Component = createMouseAwareButton("Button 3", 45, 5, 12)
    
    const button1View = button1Component.view(model.button1)
    const button2View = button2Component.view(model.button2)
    const button3View = button3Component.view(model.button3)
    
    // Mouse position display
    const mouseInfo = box(
      vstack(
        text("Mouse Position:", style().foreground(Colors.brightCyan)),
        text(`X: ${model.mousePosition.x}, Y: ${model.mousePosition.y}`, style().foreground(Colors.white)),
        text("", style()),
        text("Mouse States:", style().foreground(Colors.brightCyan)),
        text(`Button 1 - Hovered: ${model.button1.mouseState.isHovered}, Pressed: ${model.button1.mouseState.isPressed}`, style().foreground(Colors.white)),
        text(`Button 2 - Hovered: ${model.button2.mouseState.isHovered}, Pressed: ${model.button2.mouseState.isPressed}`, style().foreground(Colors.white)),
        text(`Button 3 - Hovered: ${model.button3.mouseState.isHovered}, Pressed: ${model.button3.mouseState.isPressed}`, style().foreground(Colors.white))
      )
    )
    
    // Click counts
    const clickInfo = box(
      vstack(
        text("Click Counts:", style().foreground(Colors.brightGreen)),
        text(`Button 1: ${model.button1.inner.clickCount}`, style().foreground(Colors.white)),
        text(`Button 2: ${model.button2.inner.clickCount}`, style().foreground(Colors.white)),
        text(`Button 3: ${model.button3.inner.clickCount}`, style().foreground(Colors.white)),
        text(`Total: ${model.totalClicks}`, style().foreground(Colors.brightWhite).bold())
      )
    )
    
    // Status message
    const statusBar = box(
      text(model.statusMessage, style().foreground(Colors.white))
    )
    
    // Help
    const help = vstack(
      text("Controls:", style().foreground(Colors.yellow)),
      text("Mouse: Move around and click buttons", style().foreground(Colors.gray)),
      text("Q: Quit", style().foreground(Colors.gray))
    )
    
    // Layout buttons in a row
    const buttonRow = hstack(
      button1View,
      text("  ", style()),
      button2View,
      text("  ", style()),
      button3View
    )
    
    // Info panels side by side
    const infoRow = hstack(
      mouseInfo,
      text("  ", style()),
      clickInfo
    )
    
    return vstack(
      title,
      subtitle,
      text("", style()),
      buttonRow,
      text("", style()),
      text("", style()),
      infoRow,
      text("", style()),
      statusBar,
      text("", style()),
      help
    )
  },
  
  subscriptions: (model: DemoModel) =>
    Effect.gen(function* (_) {
      const input = yield* _(InputService)
      
      // Create input stream for keyboard events
      const inputStream = input.mapKeys(key => {
        // Always quit on Ctrl+C
        if (key.ctrl && key.key === 'ctrl+c') {
          return { _tag: "Quit" as const }
        }
        
        // Send all other keys as keyPress messages
        return { _tag: "KeyPress" as const, key }
      })
      
      // TODO: Add mouse event stream when mouse events are available
      // For now, just return keyboard events
      return inputStream
    })
}

// =============================================================================
// Main
// =============================================================================

const config: AppOptions = {
  fps: 30,
  debug: false,
  quitOnEscape: true,
  quitOnCtrlC: true,
  enableMouse: true, // Enable mouse support for this demo
  fullscreen: true
}

console.log("Starting Mouse Routing Demo...")
console.log("This example demonstrates advanced mouse event routing with component bounds detection")

const program = runApp(mouseRoutingDemo, config).pipe(
  Effect.provide(LiveServices)
)

Effect.runPromise(program)
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })