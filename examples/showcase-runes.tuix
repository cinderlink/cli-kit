#!/usr/bin/env bun

/**
 * Showcase: Runes with JSX
 * 
 * Demonstrates the new $bindable runes with JSX bind: syntax
 * 
 * Usage:
 *   import { $bindable } from 'tuix/runes'
 *   
 *   // Instead of the old reactivity system:
 *   import { $state } from 'tuix/components'
 */

import { $bindable, $state as $runeState } from "../src/runes"

console.log("=== CLI Kit Runes Showcase ===\n")

// Example 1: Basic usage
console.log("1. Basic $bindable usage:")
const name = $bindable("Alice")
console.log("Initial:", name())

name.$set("Bob")
console.log("After set:", name())

name.$update(n => n + " Smith")
console.log("After update:", name())

// Example 2: With validation
console.log("\n2. Validation:")
const age = $bindable(25, {
  validate: (value) => {
    if (value < 0) return "Age cannot be negative"
    if (value > 150) return "Age seems unrealistic"
    return true
  }
})

console.log("Initial age:", age())
age.$set(30)
console.log("Valid age set:", age())
age.$set(-5)
console.log("After invalid (-5):", age())
age.$set(200)
console.log("After invalid (200):", age())

// Example 3: With transform
console.log("\n3. Transform:")
const email = $bindable("", {
  transform: (value) => value.toLowerCase().trim()
})

email.$set("  John.Doe@EXAMPLE.COM  ")
console.log("Transformed email:", email())

// Example 4: Subscriptions
console.log("\n4. Subscriptions:")
const counter = $bindable(0)
const logs: number[] = []

const unsubscribe = counter.$subscribe((value) => {
  logs.push(value)
})

counter.$set(1)
counter.$set(2)
counter.$set(3)
unsubscribe()
counter.$set(4) // Won't be logged

console.log("Logged values:", logs)

// Example 5: JSX bind: syntax (mock)
console.log("\n5. JSX bind: syntax (simulated):")

// This is how you'd use it in a real component:
/*
const MyForm = () => {
  const username = $bindable('')
  const password = $bindable('')
  const rememberMe = $bindable(false)
  
  return (
    <form>
      <TextInput bind:value={username} placeholder="Username" />
      <TextInput bind:value={password} type="password" />
      <Checkbox bind:checked={rememberMe} label="Remember me" />
      
      <Button onClick={() => {
        console.log({
          username: username(),
          password: password(),
          rememberMe: rememberMe()
        })
      }}>
        Login
      </Button>
    </form>
  )
}
*/

console.log("In JSX, bind:value automatically creates two-way binding!")
console.log("The component receives: value prop + onValueChange handler")

// Example 6: Complex validation with transform
console.log("\n6. Complex example:")
const phoneNumber = $bindable("", {
  transform: (value) => {
    // Remove all non-digits
    return value.replace(/\D/g, '')
  },
  validate: (value) => {
    if (value.length === 0) return true // Allow empty
    if (value.length !== 10) return "Phone number must be 10 digits"
    return true
  }
})

console.log("Initial phone:", phoneNumber())
phoneNumber.$set("(555) 123-4567")
console.log("After setting formatted number:", phoneNumber())
phoneNumber.$set("123")
console.log("After invalid length:", phoneNumber())

// Example 7: Derived values (manual for now)
console.log("\n7. Derived values:")
const firstName = $bindable("John")
const lastName = $bindable("Doe")

// Manual derived value
const fullName = () => `${firstName()} ${lastName()}`

console.log("Initial full name:", fullName())
firstName.$set("Jane")
console.log("After changing first name:", fullName())
lastName.$set("Smith")
console.log("After changing last name:", fullName())

console.log("\n=== Summary ===")
console.log("‚úÖ $bindable creates reactive values with:")
console.log("   - Two-way binding support")
console.log("   - Built-in validation")
console.log("   - Value transformation")
console.log("   - Subscription capability")
console.log("‚úÖ JSX bind: syntax for elegant component binding")
console.log("‚úÖ Compatible with Effect.ts for async operations")
console.log("\nüéâ This is a Svelte house! üè†")
