/**
 * Tabs Showcase - Demonstrates tab component features
 */

import { Effect, Stream } from "effect"
import { runApp } from "@/index.ts"
import { vstack, hstack, text, box } from "@/core/view.ts"
import type { Component, Cmd, AppServices, AppOptions } from "@/core/types.ts"
import { style, Colors, Borders } from "@/styling/index.ts"
import { 
  tabs,
  createTab,
  stringTabs,
  type TabsModel,
  type TabsMsg,
  type Tab
} from "@/components/index.ts"
import { InputService } from "@/services/index.ts"
import { LiveServices } from "../src/services/impl/index.ts"

// =============================================================================
// Sample Data
// =============================================================================

const sampleTabs: Array<{ id: string; title: string; content: string; icon?: string; badge?: string }> = [
  {
    id: "overview",
    title: "Overview",
    icon: "üìä",
    content: `Welcome to the Tabs Component Showcase!

This tab demonstrates the basic functionality of the tabs component:

‚Ä¢ Multiple tabs with different content
‚Ä¢ Keyboard navigation (‚Üê/‚Üí or Tab/Shift+Tab)
‚Ä¢ Number key shortcuts (1-9)
‚Ä¢ Icons and badges support
‚Ä¢ Customizable styling

Key Features:
- Dynamic tab switching
- Disabled state support
- Focus management
- Mouse interaction (planned)
- Flexible content rendering`
  },
  {
    id: "data",
    title: "Data",
    icon: "üìà",
    badge: "42",
    content: `Sample Data Overview

User Statistics:
- Total Users: 1,247
- Active Users: 892
- New Users (Today): 23
- Retention Rate: 76%

System Metrics:
- CPU Usage: 45%
- Memory Usage: 62%
- Disk Usage: 23%
- Network I/O: 156 KB/s

Recent Activity:
‚úì Database backup completed
‚úì Cache refreshed
‚ö† High memory usage detected
‚úì Security scan passed`
  },
  {
    id: "settings",
    title: "Settings",
    icon: "‚öôÔ∏è",
    content: `Application Settings

General:
‚ñ° Enable notifications
‚òë Dark mode
‚ñ° Auto-save
‚òë Show line numbers

Performance:
‚ñ° Enable caching
‚òë Compress responses
‚ñ° Enable CDN
‚òë Lazy loading

Security:
‚òë Two-factor authentication
‚òë Session timeout (30 min)
‚ñ° IP whitelist
‚òë Audit logging

Appearance:
‚Ä¢ Theme: Dark
‚Ä¢ Font Size: 14px
‚Ä¢ Color Scheme: Blue
‚Ä¢ Animation Speed: Normal`
  },
  {
    id: "logs",
    title: "Logs",
    icon: "üìã",
    badge: "New",
    content: `System Logs (Last 24 hours)

[2024-01-15 14:30:21] INFO  Application started
[2024-01-15 14:30:22] INFO  Database connection established
[2024-01-15 14:30:23] INFO  Cache warmed up
[2024-01-15 14:35:42] WARN  High memory usage: 85%
[2024-01-15 14:36:15] INFO  Memory cleaned up
[2024-01-15 15:22:33] INFO  User login: alice@example.com
[2024-01-15 15:45:17] ERROR HTTP 500: Internal server error
[2024-01-15 15:45:18] INFO  Error handled and recovered
[2024-01-15 16:12:44] INFO  Backup process started
[2024-01-15 16:15:32] INFO  Backup completed successfully
[2024-01-15 16:30:01] INFO  Scheduled maintenance completed
[2024-01-15 17:05:23] INFO  User logout: alice@example.com

Total Events: 156
Errors: 3
Warnings: 8`
  },
  {
    id: "help",
    title: "Help",
    icon: "‚ùì",
    content: `Help & Documentation

Navigation:
‚Ä¢ ‚Üê ‚Üí Arrow keys to switch tabs
‚Ä¢ Tab/Shift+Tab to navigate
‚Ä¢ Number keys (1-9) for direct access
‚Ä¢ Mouse clicks (coming soon)

Component Features:
‚Ä¢ Tab content can be any type
‚Ä¢ Support for icons and badges
‚Ä¢ Tabs can be enabled/disabled
‚Ä¢ Customizable styling
‚Ä¢ Focus management
‚Ä¢ Dynamic tab addition/removal

Keyboard Shortcuts:
Tab       - Next tab
Shift+Tab - Previous tab
1-9       - Select tab by number
Ctrl+C    - Exit application
Esc       - Exit application

For more information, visit our documentation
or contact support@example.com`
  }
]

// =============================================================================
// Model
// =============================================================================

interface Model {
  readonly tabsComponent: TabsModel<string>
}

// =============================================================================
// Messages
// =============================================================================

type Msg = 
  | { readonly tag: "tabsMsg"; readonly msg: TabsMsg<string> }

// =============================================================================
// Component Setup
// =============================================================================

const createTabsComponent = () => {
  return stringTabs(sampleTabs)
}

// =============================================================================
// Component
// =============================================================================

const showcaseComponent: Component<Model, Msg> = {
  init: Effect.gen(function* (_) {
    const tabsComp = createTabsComponent()
    const [tabsModel] = yield* _(tabsComp.init())
    
    return [{
      tabsComponent: tabsModel
    }, []]
  }),
  
  update(msg: Msg, model: Model) {
    switch (msg.tag) {
      case "tabsMsg": {
        const tabsComp = createTabsComponent()
        return tabsComp.update(msg.msg, model.tabsComponent).pipe(
          Effect.map(([newTabsModel, cmds]) => [
            { ...model, tabsComponent: newTabsModel },
            cmds.map(cmd => cmd.pipe(
              Effect.map(tabsMsg => ({ tag: "tabsMsg", msg: tabsMsg } as Msg))
            ))
          ])
        )
      }
    }
  },
  
  view(model: Model) {
    const title = text("Tabs Component Showcase", style().foreground(Colors.brightWhite))
    const subtitle = text("Navigate between tabs to see different content", style().foreground(Colors.gray))
    
    // Tabs view
    const tabsComp = createTabsComponent()
    const tabsView = tabsComp.view(model.tabsComponent)
    
    // Instructions
    const instructions = [
      text("Navigation Instructions:", style().foreground(Colors.yellow)),
      text("‚Üê ‚Üí Arrow keys  |  Tab/Shift+Tab  |  Number keys (1-5)  |  Ctrl+C to exit", style().foreground(Colors.gray))
    ]
    
    // Current tab info
    const activeTab = sampleTabs.find(tab => tab.id === model.tabsComponent.activeTabId)
    const tabInfo = activeTab ? [
      text("", style()),
      text(`Active Tab: ${activeTab.icon || ""} ${activeTab.title}${activeTab.badge ? ` (${activeTab.badge})` : ""}`, style().foreground(Colors.cyan))
    ] : []
    
    // Features demonstration
    const features = [
      text("Component Features:", style().foreground(Colors.yellow)),
      text("‚úì Multiple content types", style().foreground(Colors.green)),
      text("‚úì Icons and badges", style().foreground(Colors.green)),
      text("‚úì Keyboard navigation", style().foreground(Colors.green)),
      text("‚úì Number key shortcuts", style().foreground(Colors.green)),
      text("‚úì Focus management", style().foreground(Colors.green)),
      text("‚óã Mouse support (planned)", style().foreground(Colors.gray))
    ]
    
    return vstack(
      title,
      subtitle,
      text("", style()),
      box(
        tabsView,
        {
          width: 80,
          height: 20,
          border: Borders.single,
          borderStyle: style().foreground(Colors.blue),
          padding: { top: 0, right: 1, bottom: 0, left: 1 }
        }
      ),
      ...tabInfo,
      text("", style()),
      vstack(...instructions),
      text("", style()),
      vstack(...features)
    )
  },
  
  subscriptions: (model: Model) =>
    Effect.gen(function* (_) {
      const input = yield* _(InputService)
      
      return input.mapKeys(key => {
        // Tab navigation
        if (key.key === 'left' || (key.key === 'tab' && key.shift)) {
          return { tag: "tabsMsg", msg: { tag: "prevTab" } } as Msg
        }
        if (key.key === 'right' || key.key === 'tab') {
          return { tag: "tabsMsg", msg: { tag: "nextTab" } } as Msg
        }
        
        // Number key shortcuts
        if (key.key >= '1' && key.key <= '9') {
          const tabIndex = parseInt(key.key) - 1
          if (tabIndex < sampleTabs.length) {
            return { tag: "tabsMsg", msg: { tag: "selectTab", tabId: sampleTabs[tabIndex].id } } as Msg
          }
        }
        
        return null
      })
    })
}

// =============================================================================
// Main
// =============================================================================

const config: AppOptions = {
  fps: 30,
  debug: true,
  quitOnEscape: true,
  quitOnCtrlC: true,
  enableMouse: false,
  fullscreen: true
}

const program = runApp(showcaseComponent, config).pipe(
  Effect.provide(LiveServices)
)

Effect.runPromise(program)
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error)
    process.exit(1)
  })