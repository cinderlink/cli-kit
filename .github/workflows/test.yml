name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install dependencies
      run: bun install

    - name: Run type checking
      run: bun run typecheck:tsc

    - name: Run core tests
      run: bun run test:core

    - name: Run unit tests
      run: bun run test:unit

    - name: Run integration tests
      run: bun run test:integration
      continue-on-error: true

    - name: Run performance tests
      run: bun run test:perf
      continue-on-error: true

    - name: Generate coverage report
      run: bun run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Test examples
      run: bun run examples:test

  test-packages:
    name: Test Packages
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Test packages in parallel
      run: |
        # Run tests for individual packages in parallel
        bun run test:core &
        bun run test:layout &
        bun run test:styling &
        bun run test:components &
        bun run test:cli &
        bun run test:reactivity &
        bun run test:jsx &
        bun run test:services &
        bun run test:utils &
        wait

    - name: Check coverage thresholds
      run: |
        bun run test:coverage
        # Check if coverage meets minimum thresholds
        if [ -f coverage/coverage-summary.json ]; then
          echo "Coverage report generated successfully"
        fi

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run screenshot tests
      run: |
        # Generate screenshots for visual regression
        bun run screenshot:examples
        
    - name: Upload screenshots
      uses: actions/upload-artifact@v3
      with:
        name: screenshots-${{ github.sha }}
        path: .tuix/screenshots/
        retention-days: 7