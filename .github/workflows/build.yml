name: Build Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install dependencies
      run: bun install

    - name: Type check
      run: bun run typecheck:tsc

    - name: Build main package
      run: bun run build

    - name: Build packages
      run: bun run build:packages

    - name: Build compiled binary
      run: bun run build:compile
      if: matrix.os == 'ubuntu-latest'

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ matrix.os }}
        path: |
          dist/
          packages/*/dist/
        retention-days: 7

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Build for analysis
      run: bun run build

    - name: Analyze bundle size
      run: |
        # Create bundle analysis report
        echo "# Bundle Size Analysis" > bundle-analysis.md
        echo "Generated on: $(date)" >> bundle-analysis.md
        echo "" >> bundle-analysis.md
        
        # Main bundle
        if [ -f "dist/index.js" ]; then
          size=$(du -h dist/index.js | cut -f1)
          echo "- Main bundle: $size" >> bundle-analysis.md
        fi
        
        # Package bundles
        for dir in packages/*/dist/; do
          if [ -d "$dir" ]; then
            pkg=$(basename $(dirname "$dir"))
            size=$(du -sh "$dir" | cut -f1)
            echo "- $pkg package: $size" >> bundle-analysis.md
          fi
        done
        
        # Compiled binary
        if [ -f "dist/tuix" ]; then
          size=$(du -h dist/tuix | cut -f1)
          echo "- Compiled binary: $size" >> bundle-analysis.md
        fi

    - name: Upload bundle analysis
      uses: actions/upload-artifact@v3
      with:
        name: bundle-analysis
        path: bundle-analysis.md

  package-validation:
    name: Package Validation
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Build packages
      run: bun run build

    - name: Test package exports
      run: |
        # Test that all exports work correctly
        bun -e "import('./dist/index.js').then(m => console.log('Main export OK'))"
        bun -e "import('./cli.ts').then(m => console.log('CLI export OK'))"
        bun -e "import('./jsx-runtime.ts').then(m => console.log('JSX runtime OK'))"

    - name: Validate package.json
      run: |
        # Check package.json structure
        bun -e "
        const pkg = require('./package.json');
        console.log('Package name:', pkg.name);
        console.log('Version:', pkg.version);
        console.log('Exports:', Object.keys(pkg.exports).length);
        console.log('Dependencies:', Object.keys(pkg.dependencies).length);
        console.log('Dev dependencies:', Object.keys(pkg.devDependencies).length);
        "

    - name: Test CLI functionality
      run: |
        # Test basic CLI commands
        ./bin/tuix.ts --help
        ./bin/tuix.ts --version
        
    - name: Package health check
      run: |
        echo "Package validation completed successfully"