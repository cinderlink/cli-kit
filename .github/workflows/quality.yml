name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 1' # Weekly on Monday

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run ESLint
      run: |
        bun run lint:all
        
    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        TODO_COUNT=$(grep -r "TODO\|FIXME" src/ --include="*.ts" --include="*.tsx" | wc -l)
        echo "Found $TODO_COUNT TODO/FIXME comments"
        
        if [ $TODO_COUNT -gt 0 ]; then
          echo "TODO/FIXME comments found:"
          grep -r "TODO\|FIXME" src/ --include="*.ts" --include="*.tsx" -n
          echo "::warning::Found $TODO_COUNT TODO/FIXME comments in production code"
        fi

    - name: Check for console.log statements
      run: |
        echo "Checking for console.log statements..."
        CONSOLE_COUNT=$(grep -r "console\." src/ --include="*.ts" --include="*.tsx" | wc -l)
        echo "Found $CONSOLE_COUNT console statements"
        
        if [ $CONSOLE_COUNT -gt 0 ]; then
          echo "Console statements found:"
          grep -r "console\." src/ --include="*.ts" --include="*.tsx" -n
          echo "::warning::Found $CONSOLE_COUNT console statements in production code"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate
      continue-on-error: true

    - name: Run security linting
      run: |
        # Check for common security issues
        echo "Checking for potential security issues..."
        
        # Check for hardcoded secrets
        if grep -r "password\|secret\|token\|key" src/ --include="*.ts" --include="*.tsx" -i | grep -v "// " | grep -v "types\|interface\|const.*=.*''" | head -10; then
          echo "::warning::Potential hardcoded secrets found"
        fi
        
        # Check for eval usage
        if grep -r "eval\|Function(" src/ --include="*.ts" --include="*.tsx"; then
          echo "::error::Dangerous eval usage found"
          exit 1
        fi
        
        # Check for dangerous file operations
        if grep -r "fs\.unlink\|fs\.rm\|process\.exit" src/ --include="*.ts" --include="*.tsx" | grep -v "// Safe:"; then
          echo "::warning::Potentially dangerous file operations found"
        fi

    - name: Check dependencies for vulnerabilities
      run: |
        # Create vulnerability report
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        # Check for outdated dependencies
        npm outdated > outdated.txt || true
        if [ -s outdated.txt ]; then
          echo "## Outdated Dependencies" >> security-report.md
          echo '```' >> security-report.md
          cat outdated.txt >> security-report.md
          echo '```' >> security-report.md
        fi

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Audit dependencies
      run: |
        echo "# Dependency Audit Report" > dependency-audit.md
        echo "Generated on: $(date)" >> dependency-audit.md
        echo "" >> dependency-audit.md
        
        # Check dependency tree
        echo "## Dependency Tree" >> dependency-audit.md
        echo '```' >> dependency-audit.md
        bun install --dry-run 2>&1 | head -50 >> dependency-audit.md
        echo '```' >> dependency-audit.md
        
        # Check for duplicate dependencies
        echo "## Potential Duplicates" >> dependency-audit.md
        echo '```' >> dependency-audit.md
        cat package.json | grep -E '".*":\s*"' | sort | uniq -d >> dependency-audit.md
        echo '```' >> dependency-audit.md

    - name: License compliance check
      run: |
        echo "## License Compliance" >> dependency-audit.md
        echo '```' >> dependency-audit.md
        
        # Check for incompatible licenses
        echo "Checking for GPL and other copyleft licenses..."
        
        # This is a simplified check - in production you'd use a proper license scanner
        if [ -f "node_modules" ]; then
          find node_modules -name "package.json" -exec grep -l "GPL\|AGPL\|LGPL" {} \; | head -10 >> dependency-audit.md
        fi
        
        echo '```' >> dependency-audit.md

    - name: Upload dependency audit
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit
        path: dependency-audit.md

  type-safety:
    name: Type Safety Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Strict TypeScript check
      run: |
        # Run strict type checking
        bun run typecheck:tsc
        
        # Check for any type usage
        echo "Checking for 'any' type usage..."
        ANY_COUNT=$(grep -r ": any\|<any>" src/ --include="*.ts" --include="*.tsx" | wc -l)
        echo "Found $ANY_COUNT 'any' type usages"
        
        if [ $ANY_COUNT -gt 20 ]; then
          echo "::error::Too many 'any' type usages found ($ANY_COUNT)"
          grep -r ": any\|<any>" src/ --include="*.ts" --include="*.tsx" -n
          exit 1
        elif [ $ANY_COUNT -gt 0 ]; then
          echo "::warning::Found $ANY_COUNT 'any' type usages"
          grep -r ": any\|<any>" src/ --include="*.ts" --include="*.tsx" -n
        fi

    - name: Check for TypeScript errors
      run: |
        # Generate type safety report
        echo "# Type Safety Report" > type-safety-report.md
        echo "Generated on: $(date)" >> type-safety-report.md
        echo "" >> type-safety-report.md
        
        # Check compilation
        echo "## TypeScript Compilation" >> type-safety-report.md
        echo '```' >> type-safety-report.md
        bun run typecheck:tsc 2>&1 | head -20 >> type-safety-report.md
        echo '```' >> type-safety-report.md

    - name: Upload type safety report
      uses: actions/upload-artifact@v3
      with:
        name: type-safety-report
        path: type-safety-report.md

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [lint, security-scan, dependency-audit, type-safety]
    if: always()
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v3
      with:
        path: quality-reports

    - name: Generate quality summary
      run: |
        echo "# Quality Gate Summary" > quality-summary.md
        echo "Generated on: $(date)" >> quality-summary.md
        echo "" >> quality-summary.md
        
        # Check job results
        if [ "${{ needs.lint.result }}" == "success" ]; then
          echo "✅ Lint: PASSED" >> quality-summary.md
        else
          echo "❌ Lint: FAILED" >> quality-summary.md
        fi
        
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ Security: PASSED" >> quality-summary.md
        else
          echo "❌ Security: FAILED" >> quality-summary.md
        fi
        
        if [ "${{ needs.dependency-audit.result }}" == "success" ]; then
          echo "✅ Dependencies: PASSED" >> quality-summary.md
        else
          echo "❌ Dependencies: FAILED" >> quality-summary.md
        fi
        
        if [ "${{ needs.type-safety.result }}" == "success" ]; then
          echo "✅ Type Safety: PASSED" >> quality-summary.md
        else
          echo "❌ Type Safety: FAILED" >> quality-summary.md
        fi
        
        echo "" >> quality-summary.md
        echo "## Next Steps" >> quality-summary.md
        echo "- Review individual reports for details" >> quality-summary.md
        echo "- Address any failing quality gates" >> quality-summary.md
        echo "- Update documentation if needed" >> quality-summary.md

    - name: Upload quality summary
      uses: actions/upload-artifact@v3
      with:
        name: quality-summary
        path: quality-summary.md