name: Release Automation

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
      prerelease:
        description: 'Is this a prerelease?'
        type: boolean
        default: false

jobs:
  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Bump version
      run: |
        # Update package.json version
        bun -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        pkg.version = '${{ github.event.inputs.version }}';
        fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
        
        # Commit and tag
        git add package.json
        git commit -m "chore: bump version to ${{ github.event.inputs.version }}"
        git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
        git push origin main --tags

  build-release:
    name: Build Release Assets
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
          - os: macos-latest
            target: darwin-x64
          - os: windows-latest
            target: win32-x64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Build package
      run: bun run build

    - name: Build compiled binary
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          bun build --compile --minify --bytecode --target bun-linux-x64 --outfile dist/tuix-linux-x64 src/index.ts
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          bun build --compile --minify --bytecode --target bun-darwin-x64 --outfile dist/tuix-darwin-x64 src/index.ts
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          bun build --compile --minify --bytecode --target bun-windows-x64 --outfile dist/tuix-win32-x64.exe src/index.ts
        fi
      shell: bash

    - name: Create release archive
      run: |
        # Create release archive
        mkdir -p release
        cp -r dist/ release/
        cp README.md release/
        cp package.json release/
        
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a tuix-${{ matrix.target }}.zip release/
        else
          tar -czf tuix-${{ matrix.target }}.tar.gz release/
        fi
      shell: bash

    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-${{ matrix.target }}
        path: |
          tuix-${{ matrix.target }}.*
          dist/tuix-*

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: build-release
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Build package
      run: bun run build

    - name: Setup NPM authentication
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

    - name: Publish to NPM
      run: |
        # Determine if this is a prerelease
        if [[ "${{ github.ref }}" =~ -rc\.|alpha|beta ]]; then
          npm publish --tag beta
        else
          npm publish
        fi

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release, publish-npm]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download release assets
      uses: actions/download-artifact@v3
      with:
        path: release-assets

    - name: Generate changelog
      run: |
        # Generate changelog from git history
        echo "# Changelog" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          git log --oneline $PREV_TAG..HEAD --pretty=format:"- %s" >> CHANGELOG.md
        else
          echo "## Initial Release" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo "npm install tuix@$VERSION" >> CHANGELOG.md
        echo '```' >> CHANGELOG.md

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}

    - name: Upload Release Assets
      run: |
        # Upload all release artifacts
        for asset in release-assets/*/tuix-*; do
          if [ -f "$asset" ]; then
            echo "Uploading $asset"
            # Note: In a real implementation, you'd use the GitHub API to upload assets
          fi
        done